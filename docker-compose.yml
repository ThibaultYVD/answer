version: "3.8"

services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - data
      - identity
    networks:
      - app-network

  data:
    build:
      context: ./server/data
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001 
      - DB_HOST=db
      - DB_USER=answer_user
      - DB_PASSWORD=password1234
      - DB_NAME=answer_db
      - REDIS_PASSWORD=KMQrcJEVAvYgPdBlwZTCVJtleGjqtV5o
      - SECRET_KEY=coucou
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  identity:
    build:
      context: ./server/identity
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=db
      - DB_USER=answer_user
      - DB_PASSWORD=password1234
      - DB_NAME=answer_db
      - REDIS_PASSWORD=KMQrcJEVAvYgPdBlwZTCVJtleGjqtV5o
      - SECRET_KEY=coucou
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  db:
    image: mysql:8
    restart: always
    hostname: db
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=answer_db
      - MYSQL_USER=answer_user
      - MYSQL_PASSWORD=password1234
    ports:  
      - "3306:3306"
    volumes:
      - mysql_db:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  mysql_db:

networks:
  app-network:
    driver: bridge